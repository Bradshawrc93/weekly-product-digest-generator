#!/usr/bin/env node

/**
 * Test Slack token and check available scopes
 */

require('dotenv').config();
const { WebClient } = require('@slack/web-api');

async function testSlackToken() {
  console.log('üîç Testing Slack Token\n');
  console.log('=' .repeat(60));
  
  try {
    const client = new WebClient(process.env.SLACK_BOT_TOKEN);
    
    console.log('üîë Token Information:');
    console.log(`‚Ä¢ Token starts with: ${process.env.SLACK_BOT_TOKEN?.substring(0, 20)}...`);
    console.log(`‚Ä¢ Token length: ${process.env.SLACK_BOT_TOKEN?.length || 0} characters\n`);
    
    // Test auth.test to get bot info
    console.log('üîß Testing auth.test...');
    const authTest = await client.auth.test();
    console.log('‚úÖ Auth test successful!');
    console.log(`‚Ä¢ Bot User ID: ${authTest.user_id}`);
    console.log(`‚Ä¢ Bot User: ${authTest.user}`);
    console.log(`‚Ä¢ Team: ${authTest.team}`);
    console.log(`‚Ä¢ Team ID: ${authTest.team_id}`);
    console.log(`‚Ä¢ URL: ${authTest.url}\n`);
    
    // Test conversations.list to see what we can access
    console.log('üì∫ Testing conversations.list...');
    try {
      const conversations = await client.conversations.list({
        types: 'public_channel,private_channel',
        limit: 10
      });
      
      console.log('‚úÖ Conversations list successful!');
      console.log(`‚Ä¢ Total channels: ${conversations.channels?.length || 0}`);
      console.log('‚Ä¢ Available channels:');
      conversations.channels?.slice(0, 5).forEach(channel => {
        console.log(`  - #${channel.name} (${channel.id}) - ${channel.is_private ? 'Private' : 'Public'}`);
      });
      
      if (conversations.channels && conversations.channels.length > 5) {
        console.log(`  ... and ${conversations.channels.length - 5} more channels`);
      }
      
    } catch (error) {
      console.log('‚ùå Conversations list failed:');
      console.log(`‚Ä¢ Error: ${error.message}`);
      console.log(`‚Ä¢ Code: ${error.code}`);
      console.log(`‚Ä¢ Data: ${JSON.stringify(error.data, null, 2)}`);
    }
    
    // Test specific channel access
    console.log('\nüéØ Testing specific channel access...');
    try {
      const channelInfo = await client.conversations.info({
        channel: 'product'
      });
      
      console.log('‚úÖ Channel info successful!');
      console.log(`‚Ä¢ Channel: #${channelInfo.channel.name}`);
      console.log(`‚Ä¢ ID: ${channelInfo.channel.id}`);
      console.log(`‚Ä¢ Members: ${channelInfo.channel.num_members}`);
      console.log(`‚Ä¢ Type: ${channelInfo.channel.is_private ? 'Private' : 'Public'}`);
      
    } catch (error) {
      console.log('‚ùå Channel info failed:');
      console.log(`‚Ä¢ Error: ${error.message}`);
      console.log(`‚Ä¢ Code: ${error.code}`);
    }
    
    // Test message history
    console.log('\nüí¨ Testing message history...');
    try {
      const history = await client.conversations.history({
        channel: 'product',
        limit: 5
      });
      
      console.log('‚úÖ Message history successful!');
      console.log(`‚Ä¢ Messages found: ${history.messages?.length || 0}`);
      
      if (history.messages && history.messages.length > 0) {
        console.log('‚Ä¢ Recent messages:');
        history.messages.slice(0, 3).forEach((message, index) => {
          console.log(`  ${index + 1}. ${message.user}: ${message.text?.substring(0, 50)}...`);
        });
      }
      
    } catch (error) {
      console.log('‚ùå Message history failed:');
      console.log(`‚Ä¢ Error: ${error.message}`);
      console.log(`‚Ä¢ Code: ${error.code}`);
    }
    
    console.log('\n‚úÖ Slack token testing completed!');
    
  } catch (error) {
    console.error('‚ùå Slack token test failed:', error.message);
    if (error.response?.data) {
      console.error('API Error:', JSON.stringify(error.response.data, null, 2));
    }
  }
}

testSlackToken();
